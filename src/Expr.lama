-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (config @ [state, world], expr) {
  fun addDefs (state, defs) {
    foldl(fun (state, def) {
      case def of
        Local (names) -> addNames(state, names)
      | Fun (name, args, body) -> addFunction(state, name, args, body)  
      esac
    }, state, defs)
  }

  fun addArgs (state, names, vals) {
    foldl(fun (state, [name, val]) {
      addName(state, name, Var (val))
    }, state, zip(names, vals))
  }
  
  case expr of
    Assn (l, r)      -> case evalList(config, {l, r}) of 
                          [[state, world], { Ref (x), v }] -> [[state <- [x, Var (v)], world], v]
                        esac
  | Seq (s1, s2)     -> case eval(config, s1) of 
                          [config, _] -> eval(config, s2)
                        esac
  | Skip             -> [config, Bottom]
  | Read (x)         -> checkVar(state, x);
                        case readWorld(world) of
                          [v, world] -> [[state <- [x, Var (v)], world], Bottom]
                        esac
  | Write (e)        -> case eval(config, e) of 
                          [[state, world], v] -> [[state, writeWorld(v, world)], Bottom]
                        esac
  | If (e, s1, s2)   -> case eval(config, e) of
                          [config, n] -> eval(config, if n then s1 else s2 fi)
                        esac
  | While (e, s)     -> case eval(config, e) of
                          [config, 0] -> [config, Bottom]
                        | [config, _] -> eval(config, Seq (s, expr))
                        esac
  | Repeat (s, e)    -> case eval(config, s) of 
                          [config, _] -> case eval(config, e) of
                                           [config, 0] -> eval(config, expr)
                                         | [config, _] -> [config, Bottom]
                                         esac
                        esac
  | Var (x)          -> checkVar(state, x);
                        [config, case lookup(state, x) of Var (v) -> v esac]
  | Ref (x)          -> checkVar(state, x);
                        [config, Ref (x)]
  | Const (n)        -> [config, n]
  | Binop (op, l, r) -> case evalList(config, {l, r}) of 
                          [config, { l, r }] -> [config, evalOp(op, l, r)]
                        esac
  | Scope (defs, e)  -> case eval([addDefs(enterScope(state), defs), world], e) of
                          [[state, world], vs] -> [[leaveScope(state), world], vs]
                        esac
  | Call (f, args)   -> checkFun(state, f);
                        case lookup(state, f) of
                          Fun (fargs, body) -> 
                            if size(args) != size(fargs) then
                              error(sprintf("wrong number of actual parameters in function ""%s"" call", f), getLoc(f))
                            fi;
                            case evalList(config, args) of
                              [[s, w], values] ->
                                case eval([addArgs(enterFunction(s), fargs, values), w], body) of
                                  [[state, world], val] -> [[leaveFunction(s, getGlobal(state)), world], val]
                                esac
                            esac
                        esac
  | Ignore (e)       -> case eval(config, e) of 
                          [config, _] -> [config, Bottom]
                        esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
